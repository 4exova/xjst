ometa XJSTParser <: BSJSParser {

    exprs = "(" listOf(#expr, ','):as ")" -> as | expr:e -> [e],

    const = "string":s -> [#string, s] |
            "number":n -> [#number, n],

    tBody = exprs,

    subMatch = expr:e -> XJSTParser.match(e, #expr2submathc),

    expr2submathc = [#binop '==' :e1 [#string :x]:c] -> [e1, c] |
        :e2 -> [e2, [#get, #true]],

    tMatch = listOf(#subMatch, ','):ms -> ms |
        subMatch:m -> [m],

    template = tMatch:m spaces tBody:b -> [m, b],

    topLevel = template+:r '\n'* end -> XJSTParser._identify(r)

}

XJSTParser._identify = function(templates) {
    var predicates = new Identifier();
    templates.forEach(function(template) {
        template[0].forEach(function(subMatch) {
            subMatch.unshift(predicates.identify(subMatch[0]));
        })
    });
    return templates;
};

ometa XJSTBeautifier {

    jsTrans = [:t apply(t):ans] -> ans,

    number :n -> n,
    string :s -> s.toProgramString(),
    arr jsTrans*:xs -> ('[' + xs.join(', ') + ']'),
    unop :op jsTrans:x -> (op + x),
    getp jsTrans:fd jsTrans:x -> (x + '[' + fd + ']'),
    get :x -> x,
    set jsTrans:lhs jsTrans:rhs -> (lhs + ' = ' + rhs),
    mset jsTrans:lhs :op jsTrans:rhs -> (lhs + ' ' + op + '= ' + rhs),
    binop :op jsTrans:x jsTrans:y -> (x + ' ' + op + ' ' + y),
    preop :op jsTrans:x -> (op + x),
    postop :op jsTrans:x -> (x + op),

    subMatch = [:id jsTrans:m [#get #true]] -> m |
        [:id jsTrans:e jsTrans:c] -> (e + ' == ' + c),

    tMatch = [subMatch:m] -> m |
        [subMatch+:ms] -> ms.join(', '),

    tBody = [jsTrans:e] -> ('\n    ' + e) |
        [jsTrans+:es] -> (' (\n    ' + es.join(',\n    ') + ' )'),

    template = [tMatch:m tBody:b] -> (m + b),

    topLevel = template+:ts -> ts.join('\n\n')

}

ometa XJSTCompiler <: BSJSTranslator {

    subMatch = [:id trans:m [#get #true]] -> m |
        [:id trans:e trans:c] -> (e + ' == ' + c),

    tMatch = [subMatch:m] -> m |
        [subMatch+:ms] -> ms.join(' && '),

    tBody = [trans:e] -> e |
        [trans+:es] -> (' (\n        ' + es.join(',\n        ') + ' )'),

    template = [tMatch:m tBody:b] -> ('    if(' + m + ') return ' + b + ';'),

    topLevel = template+:ts -> ('function(){\n' + ts.join('\n') +'\n}'),

    topLevel2 = :ts -> XJSTCompiler.matchAll(ts.reverse(), 'topLevel2')

}
