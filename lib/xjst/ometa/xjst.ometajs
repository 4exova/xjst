var ometajs = require('ometajs'),
    xjst = require('../../xjst'),
    utils = xjst.utils,

    Identifier = utils.Identifier,
    BSJSParser = ometajs.BSJSParser,
    BSJSTranslator = ometajs.BSJSTranslator;

ometa XJSTParser <: BSJSParser {

    const = [#string :s] | [#number :n],

    isKeyword :x = ?(BSJSParser._isKeyword(x) || x === 'local' || x === 'template'),

    primExprHd = "local" "(" expr:a ")" expr:b localExpr([#local, a, b]):r -> r
        | ^primExprHd,

    stmt = "local" "(" expr:a ")" stmt:b localStmt([#local, a, b]):r -> r
        | ^stmt,

    localStmt = [#local localAsmts:as :t] -> {
            [#begin].concat(as[0], as[1], [t], as[2]);
        },

    localExpr = [#local localAsmts:as :t] -> {
            as[0].concat(as[1], [t], as[2]).reduce(function(a, i) {
                return a ? [#binop, ",", a, i] : i;
            });
        },

    localAsmts = localAsmt:e1 -> e1 |
        [#binop ',' localAsmts:es localAsmt:e2] -> {
          es.forEach(function(e, i) {
            es[i] = e.concat(e2[i]);
          });
          es
        },

    localAsmt = [#set [(#get :n | #getp :k :o)]:p :v]
                localProps(p):props -> {
            var lv = XJSTParser._addLocalVar(this);

            [
                props[1] ? [props[1], [#set, lv, props[0]]] :
                           [[#set, lv, props[0]]],
                [[#set, props[0], v]],
                [[#set, props[0], lv]]
            ]
        },

    localProps = [#get :k]:expr -> [expr]
                 | [#call localProps:o] -> {
                     var v = XJSTParser._addLocalVar(this);

                     [
                        [#call, v],
                        o[1] ? [#binop, ',', [#set, v, [#call, o[0]]], op[1]] :
                               [#set, v, [#call, o[0]]]
                     ]
                 } | [#getp const:k :o]:expr -> [expr]
                 | [#getp :k [#this]] -> {
                     var v = XJSTParser._addLocalVar(this);

                     [ [#getp, v, [#this]], [#set, v, k] ]
                 } | [#getp :k localProps:o] -> {
                     var v = XJSTParser._addLocalVar(this);

                    [
                        [#getp, v, o[0]],
                        o[1] ? [#binop, ',', [#set, v, k], o[1]] : [#set, v, k]
                    ]
                 },

    subMatch = [#binop '===' :e1 const:c] -> [e1, c] |
        [#binop '===' const:c :e2] -> [e2, c] |
        :e3 -> [[#unop, '!', e3], [#get, #false]],

    expr2match = [#binop '&&' expr2match:ms subMatch:m1] -> { ms.push(m1); ms} |
        subMatch:m2 -> [m2] ,

    template = "template" "(" expr:m ")" stmt:b -> [XJSTParser.match(m, #expr2match), b],

    topLevel = { this._vars = [] }
        (template:t -> [#template, t] | srcElem:s -> [#stmt, s])+:ts spaces end -> {
        if(this._vars.length) {
           this._vars.forEach(function(v) {
               v.push([#get, #undefined]);
           });
           this._vars.unshift(#var);
           ts.unshift([#stmt, this._vars]);
        }

        XJSTParser._splitTemplates(ts);
    }

}

XJSTParser._getLocalIdCounter = 0;
XJSTParser._getLocalId = function() {
  return this._getLocalIdCounter++;
};
XJSTParser._addLocalVar = function(p) {
    var id = this._getLocalId();
    p._vars.push(['__r' + id]);
    return [#get, '__r' + id];
};

XJSTParser._splitTemplates = function(ts) {
    var templates = [],
        other = [],
        i;

    while(i = ts.shift())
        i[0] == 'template'?
            templates.unshift(i[1]) :
            other.push(i[1]);

    return [other, XJSTParser._identify(templates)];
};

XJSTParser._identify = function(templates) {
    var predicates = new Identifier();

    templates.forEach(function(template) {
        template[0].forEach(function(subMatch) {
            subMatch.unshift(predicates.identify(subMatch[0]));
        })
    });

    return templates;
};

ometa XJSTCompiler <: BSJSTranslator {

    subMatch = [:id trans:m [#get #true]] -> m |
        [:id trans:e trans:c] -> (e + ' === ' + c),

    tMatch = [subMatch:m] -> m |
        [subMatch+:ms] -> ms.join(' && '),

    tBody = trans:e -> e,

    template = [tMatch:m tBody:b] -> ('    if(' + m + ') {' + b + ';return}'),

    templates = [template*:ts] -> ('exports.apply = function(c) {\n' + ts.join('\n') +'\n};'),

    other = [trans*:o] -> o.join(';'),

    topLevel = [other:o templates:t] -> {
        '(function(exports) {' +
        o + ';' + t +
        'return exports})(typeof exports === "undefined"? {} : exports)' }

}
