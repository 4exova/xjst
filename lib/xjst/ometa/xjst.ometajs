var ometajs = require('ometajs'),
    xjst = require('../../xjst'),
    utils = xjst.utils,

    Identifier = utils.Identifier,
    BSJSParser = ometajs.BSJSParser,
    BSJSTranslator = ometajs.BSJSTranslator;

ometa XJSTParser <: BSJSParser {

    const = [#string :s] | [#number :n],

    isKeyword :x = ?(BSJSParser._isKeyword(x) || x === 'local' || x === 'template'),

    primExprHd = "local" "(" expr:a ")" expr:b localExpr([#local, a, b]):r -> r
        | ^primExprHd,

    stmt = "local" "(" expr:a ")" stmt:b localStmt([#local, a, b]):r -> r
        | ^stmt,

    localStmt = [#local localAsmts:as :t] -> {
            [#begin].concat(as[0], [t], as[1]);
        },

    localExpr = [#local localAsmts:as :t] -> {
            var prelude = [],
                result = XJSTParser._getLocalVar(this),
                self = this;

            as[0].forEach(function(e) {
              if (e[0] === 'var') {
                e.slice(1).forEach(function(v) {
                  self._vars.push([v[0]]);
                  prelude.push([#set, [#get, v[0]], v[1]]);
                });
              } else {
                prelude.push(e);
              }
            });

            [].concat(
                prelude,
                [[#set, result, t]],
                as[1],
                [result]
            ).reduce(function(a, i) {
                return a ? [#binop, ",", a, i] : i;
            });
        },

    localAsmts = localAsmt:e1 -> e1 |
        [#binop ',' localAsmts:es localAsmt:e2] -> {
            es.forEach(function(e, i) {
                es[i] = e.concat(e2[i]);
            });
            es
        },

    localAsmt = [#set [(#get :n | #getp :k :o)]:p :v]
                localProps(p):props -> {
            var lv = XJSTParser._getLocalVar(this),
                vars = [[#var].concat(props[1], [[lv[1], props[0]]])];

            [
                vars.concat([[#set, props[0], v]]),
                [[#set, props[0], lv]]
            ]
        },

    localProps = [#getp const:k :o]:expr -> [expr, []]
                 | [#getp :k [#this]] -> {
                     var v = XJSTParser._getLocalVar(this);

                     [ [#getp, v, [#this]], [[v[1], k]] ]
                 }
                 | [#call anything*:args]:expr -> {
                     var v = XJSTParser._getLocalVar(this);

                     [
                        expr,
                        [[v[1], expr]]
                     ]
                 }
                 | [#getp :k localProps:o] -> {
                     var v = XJSTParser._getLocalVar(this);

                    [
                        [#getp, v, o[0]],
                        [[v[1], k]].concat(o[1])
                    ]
                 }
                 | :expr -> [expr, []],

    subMatch = [#binop '===' :e1 const:c] -> [e1, c] |
        [#binop '===' const:c :e2] -> [e2, c] |
        :e3 -> [[#unop, '!', e3], [#get, #false]],

    expr2match = [#binop '&&' expr2match:ms subMatch:m1] -> { ms.push(m1); ms} |
        subMatch:m2 -> [m2] ,

    template = "template" "(" expr:m ")" stmt:b -> [XJSTParser.match(m, #expr2match), b],

    topLevel = { this._vars = []; }
        (template:t -> [#template, t] | srcElem:s -> [#stmt, s])+:ts spaces end -> {

        if (this._vars.length) {
           this._vars.unshift(#var);
           ts.unshift([#stmt, this._vars]);
        }

        XJSTParser._splitTemplates(ts);
    }

}

XJSTParser._getLocalIdCounter = 0;
XJSTParser._getLocalId = function() {
  return this._getLocalIdCounter++;
};
XJSTParser._getLocalVar = function(p) {
    var id = this._getLocalId();
    return [#get, '__r' + id];
};

XJSTParser._splitTemplates = function(ts) {
    var templates = [],
        other = [],
        i;

    while(i = ts.shift())
        i[0] == 'template'?
            templates.unshift(i[1]) :
            other.push(i[1]);

    return [other, XJSTParser._identify(templates)];
};

XJSTParser._identify = function(templates) {
    var predicates = new Identifier();

    templates.forEach(function(template) {
        template[0].forEach(function(subMatch) {
            subMatch.unshift(predicates.identify(subMatch[0]));
        })
    });

    return templates;
};

ometa XJSTCompiler <: BSJSTranslator {

    subMatch = [:id trans:m [#get #true]] -> m |
        [:id trans:e trans:c] -> (e + ' === ' + c),

    tMatch = [subMatch:m] -> m |
        [subMatch+:ms] -> ms.join(' && '),

    tBody = trans:e -> e,

    template = [tMatch:m tBody:b] -> ('if(' + m + ') {' + b + ';return}'),

    templates = [template*:ts] -> ('exports.apply = function(c) {\n' + ts.join('\n') +'\n};'),

    other = [trans*:o] -> o.join(';'),

    topLevel = [other:o templates:t] -> {
        '(function(exports) {' +
        o + ';' + t +
        'return exports})(typeof exports === "undefined"? {} : exports)' }

}
