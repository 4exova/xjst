oninit(function(exports) {
    var BEM_ = {}, toString = Object.prototype.toString, isArray = Array.isArray || function(obj) {
        return toString.call(obj) === "[object Array]";
    }, SHORT_TAGS = {
        area: 1,
        base: 1,
        br: 1,
        col: 1,
        command: 1,
        embed: 1,
        hr: 1,
        img: 1,
        input: 1,
        keygen: 1,
        link: 1,
        meta: 1,
        param: 1,
        source: 1,
        wbr: 1
    };
    (function(BEM, undefined) {
        var MOD_DELIM = "_", ELEM_DELIM = "__", NAME_PATTERN = "[a-zA-Z0-9-]+";
        function buildModPostfix(modName, modVal, buffer) {
            buffer.push(MOD_DELIM, modName, MOD_DELIM, modVal);
        }
        function buildBlockClass(name, modName, modVal, buffer) {
            buffer.push(name);
            modVal && buildModPostfix(modName, modVal, buffer);
        }
        function buildElemClass(block, name, modName, modVal, buffer) {
            buildBlockClass(block, undefined, undefined, buffer);
            buffer.push(ELEM_DELIM, name);
            modVal && buildModPostfix(modName, modVal, buffer);
        }
        BEM.INTERNAL = {
            NAME_PATTERN: NAME_PATTERN,
            MOD_DELIM: MOD_DELIM,
            ELEM_DELIM: ELEM_DELIM,
            buildModPostfix: function(modName, modVal, buffer) {
                var res = buffer || [];
                buildModPostfix(modName, modVal, res);
                return buffer ? res : res.join("");
            },
            buildClass: function(block, elem, modName, modVal, buffer) {
                var typeOf = typeof modName;
                if (typeOf == "string") {
                    if (typeof modVal != "string") {
                        buffer = modVal;
                        modVal = modName;
                        modName = elem;
                        elem = undefined;
                    }
                } else if (typeOf != "undefined") {
                    buffer = modName;
                    modName = undefined;
                } else if (elem && typeof elem != "string") {
                    buffer = elem;
                    elem = undefined;
                }
                if (!(elem || modName || buffer)) {
                    return block;
                }
                var res = buffer || [];
                elem ? buildElemClass(block, elem, modName, modVal, res) : buildBlockClass(block, modName, modVal, res);
                return buffer ? res : res.join("");
            },
            buildModsClasses: function(block, elem, mods, buffer) {
                var res = buffer || [];
                if (mods) {
                    var modName;
                    for (modName in mods) {
                        if (!mods.hasOwnProperty(modName)) continue;
                        var modVal = mods[modName];
                        if (modVal == null) continue;
                        modVal = mods[modName] + "";
                        if (!modVal) continue;
                        res.push(" ");
                        if (elem) {
                            buildElemClass(block, elem, modName, modVal, res);
                        } else {
                            buildBlockClass(block, modName, modVal, res);
                        }
                    }
                }
                return buffer ? res : res.join("");
            },
            buildClasses: function(block, elem, mods, buffer) {
                var res = buffer || [];
                elem ? buildElemClass(block, elem, undefined, undefined, res) : buildBlockClass(block, undefined, undefined, res);
                this.buildModsClasses(block, elem, mods, buffer);
                return buffer ? res : res.join("");
            }
        };
    })(BEM_);
    var buildEscape = function() {
        var ts = {
            '"': "&quot;",
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;"
        }, f = function(t) {
            return ts[t] || t;
        };
        return function(r) {
            r = new RegExp(r, "g");
            return function(s) {
                return ("" + s).replace(r, f);
            };
        };
    }();
    function BEMContext(context, apply_) {
        this.ctx = context;
        this.apply = apply_;
        this._buf = [];
        this._ = this;
        this._start = true;
        this._mode = "";
        this._listLength = 0;
        this._notNewList = false;
        this.position = 0;
        this.block = undefined;
        this.elem = undefined;
        this.mods = undefined;
        this.elemMods = undefined;
    }
    BEMContext.prototype.isArray = isArray;
    BEMContext.prototype.isSimple = function isSimple(obj) {
        var t = typeof obj;
        return t === "string" || t === "number" || t === "boolean";
    };
    BEMContext.prototype.isShortTag = function isShortTag(t) {
        return SHORT_TAGS.hasOwnProperty(t);
    };
    BEMContext.prototype.extend = function extend(o1, o2) {
        if (!o1 || !o2) return o1 || o2;
        var res = {}, n;
        for (n in o1) o1.hasOwnProperty(n) && (res[n] = o1[n]);
        for (n in o2) o2.hasOwnProperty(n) && (res[n] = o2[n]);
        return res;
    };
    BEMContext.prototype.identify = function() {
        var cnt = 0, id = +new Date(), expando = "__" + id, get = function() {
            return "uniq" + id + ++cnt;
        };
        return function(obj, onlyGet) {
            if (!obj) return get();
            if (onlyGet || obj[expando]) return obj[expando]; else return obj[expando] = get();
        };
    }();
    BEMContext.prototype.xmlEscape = buildEscape("[&<>]");
    BEMContext.prototype.attrEscape = buildEscape('["&<>]');
    BEMContext.prototype.BEM = BEM_;
    BEMContext.prototype.isFirst = function isFirst() {
        return this.position === 1;
    };
    BEMContext.prototype.isLast = function isLast() {
        return this.position === this._listLength;
    };
    BEMContext.prototype.generateId = function generateId() {
        return this.identify(this.ctx);
    };
    var oldApply = exports.apply;
    exports.apply = BEMContext.apply = function _apply(context) {
        var ctx = new BEMContext(context || this, oldApply);
        ctx.apply();
        return ctx._buf.join("");
    };
});

template(this._mode === "")(function() {
    var vBlock = this.ctx.block, vElem = this.ctx.elem, block = this._currBlock || this.block;
    this.ctx || (this.ctx = {});
    local({
        _mode: "default"
    }, {
        block: vBlock || (vElem ? block : undefined),
        _currBlock: vBlock || vElem ? undefined : block,
        elem: this.ctx.elem,
        mods: (vBlock ? this.ctx.mods : this.mods) || {},
        elemMods: this.ctx.elemMods || {}
    })(function() {
        this.block || this.elem ? this.position = (this.position || 0) + 1 : this._listLength--;
        apply();
    });
});

template(this._mode === "", function() {
    return this._.isArray(this.ctx);
})(function() {
    var v = this.ctx, l = v.length, i = 0, prevPos = this.position, prevNotNewList = this._notNewList;
    if (prevNotNewList) {
        this._listLength += l - 1;
    } else {
        this.position = 0;
        this._listLength = l;
    }
    this._notNewList = true;
    while (i < l) apply({
        ctx: v[i++]
    });
    prevNotNewList || (this.position = prevPos);
});

template(this._mode === "", !this.ctx)(function() {
    this._listLength--;
});

template(this._mode === "", function() {
    return this._.isSimple(this.ctx);
})(function() {
    this._listLength--;
    var ctx = this.ctx;
    (ctx && ctx !== true || ctx === 0) && this._buf.push(ctx);
});

template(this._mode === "default")(function() {
    var _this = this, BEM_ = _this.BEM, v = this.ctx, buf = this._buf, tag;
    tag = apply({
        _mode: "tag"
    });
    typeof tag != "undefined" || (tag = v.tag);
    typeof tag != "undefined" || (tag = "div");
    if (tag) {
        var jsParams, js;
        if (this.block && v.js !== false) {
            js = apply({
                _mode: "js"
            });
            js = js ? this._.extend(v.js, js === true ? {} : js) : v.js === true ? {} : v.js;
            js && ((jsParams = {})[BEM_.INTERNAL.buildClass(this.block, v.elem)] = js);
        }
        buf.push("<", tag);
        var isBEM = apply({
            _mode: "bem"
        });
        typeof isBEM != "undefined" || (isBEM = typeof v.bem != "undefined" ? v.bem : v.block || v.elem);
        var cls = apply({
            _mode: "cls"
        });
        cls || (cls = v.cls);
        var addJSInitClass = v.block && jsParams;
        if (isBEM || cls) {
            buf.push(' class="');
            if (isBEM) {
                BEM_.INTERNAL.buildClasses(this.block, v.elem, v.elemMods || v.mods, buf);
                var mix = apply({
                    _mode: "mix"
                });
                v.mix && (mix = mix ? mix.concat(v.mix) : v.mix);
                if (mix) {
                    var visited = {};
                    function visitedKey(block, elem) {
                        return (block || "") + "__" + (elem || "");
                    }
                    visited[visitedKey(this.block, this.elem)] = true;
                    if (!this._.isArray(mix)) mix = [ mix ];
                    for (var i = 0; i < mix.length; i++) {
                        var mixItem = mix[i], hasItem = mixItem.block || mixItem.elem, block = mixItem.block || mixItem._block || _this.block, elem = mixItem.elem || mixItem._elem || _this.elem;
                        hasItem && buf.push(" ");
                        BEM_.INTERNAL[hasItem ? "buildClasses" : "buildModsClasses"](block, mixItem.elem || mixItem._elem || (mixItem.block ? undefined : _this.elem), mixItem.elemMods || mixItem.mods, buf);
                        if (mixItem.js) {
                            (jsParams || (jsParams = {}))[BEM_.INTERNAL.buildClass(block, mixItem.elem)] = mixItem.js === true ? {} : mixItem.js;
                            addJSInitClass || (addJSInitClass = block && !mixItem.elem);
                        }
                        if (hasItem && !visited[visitedKey(block, elem)]) {
                            visited[visitedKey(block, elem)] = true;
                            var nestedMix = apply({
                                _mode: "mix"
                            }, {
                                block: block,
                                elem: elem
                            });
                            if (nestedMix) {
                                for (var j = 0; j < nestedMix.length; j++) {
                                    var nestedItem = nestedMix[j];
                                    if (!nestedItem.block && !nestedItem.elem || !visited[visitedKey(nestedItem.block, nestedItem.elem)]) {
                                        nestedItem._block = block;
                                        nestedItem._elem = elem;
                                        mix.splice(i + 1, 0, nestedItem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            cls && buf.push(isBEM ? " " : "", cls);
            addJSInitClass && buf.push(" i-bem");
            buf.push('"');
        }
        if (jsParams) {
            var jsAttr = apply({
                _mode: "jsAttr"
            });
            buf.push(" ", jsAttr || "onclick", '="return ', this._.attrEscape(JSON.stringify(jsParams)), '"');
        }
        var attrs = apply({
            _mode: "attrs"
        });
        attrs = this._.extend(attrs, v.attrs);
        if (attrs) {
            var name;
            for (name in attrs) {
                if (attrs[name] === undefined) continue;
                buf.push(" ", name, '="', this._.attrEscape(attrs[name]), '"');
            }
        }
    }
    if (this._.isShortTag(tag)) {
        buf.push("/>");
    } else {
        tag && buf.push(">");
        var content = apply({
            _mode: "content"
        });
        if (content || content === 0) {
            var isBEM = this.block || this.elem;
            apply({
                _mode: ""
            }, {
                _notNewList: false,
                position: isBEM ? 1 : this.position,
                _listLength: isBEM ? 1 : this._listLength,
                ctx: content
            });
        }
        tag && buf.push("</", tag, ">");
    }
});

template(this._mode === "tag")(undefined);

template(this._mode === "attrs")(undefined);

template(this._mode === "cls")(undefined);

template(this._mode === "js")(undefined);

template(this._mode === "jsAttr")(undefined);

template(this._mode === "bem")(undefined);

template(this._mode === "mix")(undefined);

template(this._mode === "content")(function() {
    return this.ctx.content;
});

template(this._mode === "default", this.elem === "core", this.block === "i-jquery")(function() {
    return applyNext({
        _mode: "",
        ctx: {
            block: "b-page",
            elem: "js",
            url: "//yandex.st/jquery/1.7.2/jquery.min.js"
        }
    });
});

template(this.block === "i-ua", this._mode === "tag")("script");

template(this.block === "i-ua", this._mode === "bem")(false);

template(this.block === "i-ua", this._mode === "content")([ ";(function(d,e,c,r){", "e=d.documentElement;", 'c="className";', 'r="replace";', 'e[c]=e[c][r]("i-ua_js_no","i-ua_js_yes");', 'if(d.compatMode!="CSS1Compat")', 'e[c]=e[c][r]("i-ua_css_standart","i-ua_css_quirks")', "})(document);" ].join(""));

template(this.block === "b-page", this._mode === "doctype")(function() {
    return this.ctx.doctype || "<!DOCTYPE html>";
});

template(this.block === "b-page", this._mode === "xUACompatible")(function() {
    return this.ctx["x-ua-compatible"] === false ? false : {
        tag: "meta",
        attrs: {
            "http-equiv": "X-UA-Compatible",
            content: this.ctx["x-ua-compatible"] || "IE=EmulateIE7, IE=edge"
        }
    };
});

template(this.block === "b-page", this._mode === "default")(function() {
    var ctx = this.ctx, dtype = apply({
        _mode: "doctype"
    }), xUA = apply({
        _mode: "xUACompatible"
    }), buf = [ dtype, {
        elem: "root",
        content: [ {
            elem: "head",
            content: [ {
                tag: "meta",
                attrs: {
                    charset: "utf-8"
                }
            }, xUA, {
                tag: "title",
                content: ctx.title
            }, ctx.favicon ? {
                elem: "favicon",
                url: ctx.favicon
            } : "", ctx.meta, {
                block: "i-ua"
            }, ctx.head ]
        }, ctx ]
    } ];
    applyNext({
        _mode: "",
        ctx: buf
    });
});

template(this.block === "b-page", this._mode === "tag")("body");

template(this.block === "b-page", this.elem !== "body", this._mode === "mix")([ {
    elem: "body"
} ]);

template(this.block === "b-page", this.elem === "root", this._mode === "bem")(false);

template(this.block === "b-page", this.elem === "root", this._mode === "tag")("html");

template(this.block === "b-page", this.elem === "root", this._mode === "cls")("i-ua_js_no i-ua_css_standart");

template(this.block === "b-page", this.elem === "head", this._mode === "bem")(false);

template(this.block === "b-page", this.elem === "head", this._mode === "tag")("head");

template(this.block === "b-page", this.elem === "meta", this._mode === "bem")(false);

template(this.block === "b-page", this.elem === "meta", this._mode === "tag")("meta");

template(this.block === "b-page", this.elem === "meta", this._mode === "attrs")(function() {
    return this.ctx.attrs;
});

template(this.block === "b-page", this.elem === "favicon", this._mode === "bem")(false);

template(this.block === "b-page", this.elem === "favicon", this._mode === "tag")("link");

template(this.block === "b-page", this.elem === "favicon", this._mode === "attrs")(function() {
    return {
        rel: "shortcut icon",
        href: this.ctx.url
    };
});

template(this.elem === "css", this.block === "b-page", this._mode === "bem")(false);

template(this.elem === "css", this.block === "b-page", this._mode === "tag")("style");

template(this.elem === "css", this.block === "b-page", function() {
    return this.ctx.hasOwnProperty("ie");
}, function() {
    return !this.ctx._ieCommented;
}, this._mode === "default")(function() {
    var ie = this.ctx.ie;
    if (ie === true) {
        apply({
            _mode: ""
        }, {
            ctx: [ 6, 7, 8, 9 ].map(function(v) {
                return {
                    elem: "css",
                    url: this.ctx.url + ".ie" + v + ".css",
                    ie: "IE " + v
                };
            }, this)
        });
    } else {
        var hideRule = !ie ? [ "gt IE 9", "<!-->", "<!--" ] : ie === "!IE" ? [ ie, "<!-->", "<!--" ] : [ ie, "", "" ];
        apply({
            _mode: ""
        }, {
            "ctx._ieCommented": true,
            ctx: [ "<!--[if " + hideRule[0] + "]>", hideRule[1], this.ctx, hideRule[2], "<![endif]-->" ]
        });
    }
});

template(this.elem === "css", this.block === "b-page", function() {
    return this.ctx.url;
}, this._mode === "tag")("link");

template(this.elem === "css", this.block === "b-page", function() {
    return this.ctx.url;
}, this._mode === "attrs")(function() {
    return {
        rel: "stylesheet",
        href: this.ctx.url
    };
});

template(this.elem === "js", this.block === "b-page", this._mode === "bem")(false);

template(this.elem === "js", this.block === "b-page", this._mode === "tag")("script");

template(this.elem === "js", this.block === "b-page", function() {
    return this.ctx.url;
}, this._mode === "attrs")(function() {
    return {
        src: this.ctx.url
    };
});

template(this.block === "b-link", this._mode === "tag")("a");

template(this.block === "b-link", this._mode === "attrs")(function() {
    var ctx = this.ctx, props = [ "title", "target" ], p = typeof ctx.url, a = {
        href: p === "undefined" || p === "string" ? ctx.url : (p = [], apply({
            _mode: ""
        }, {
            _buf: p,
            ctx: ctx.url
        }), p.join(""))
    };
    while (p = props.pop()) ctx[p] && (a[p] = ctx[p]);
    return a;
});

template(this._mode === "tag", this.elem === "inner", this.block === "b-link")("span");

template(this.mods && this.mods.pseudo, !this.elem, this.block === "b-link", this._mode === "tag")(function() {
    return this.ctx.url ? "a" : "span";
});

template(this.mods && this.mods.pseudo, !this.elem, this.block === "b-link", this._mode === "js")(true);

template(this.mods && this.mods.pseudo, !this.elem, this.block === "b-link", function() {
    return !this.ctx.url;
}, this._mode === "attrs")({});

template(this.mods && this.mods.pseudo, !this.elem, this.block === "b-link", function() {
    return !this.ctx._wrap;
}, function() {
    return !this.mods.inner;
}, this._mode === "content")(function() {
    apply({
        _mode: ""
    }, {
        ctx: {
            elem: "inner",
            content: this.ctx.content,
            _wrap: true
        }
    });
});
